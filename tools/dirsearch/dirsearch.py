"""
directory searching 
@wahyu
"""


import requests
import sys
import argparse
import multiprocessing.dummy as mp
from datetime import datetime, timedelta



def file_read(domain, fname):
    content_array = []
    with open(fname) as f:
        #Content_list is the list that contains the read lines.     
        for line in f:
            	content_array.append(domain+"/"+line.rstrip('\n'))
    return content_array


def doSearchWithDomainName(url):
	"""
	do searching for singgle domain, with multithred
	"""
	req = requests.get(url, verify=True)
	code = req.status_code
	if (code == 200):
		print ("[FOUND] Check This URL  : ", url)


def main():
	try:
		parser = argparse.ArgumentParser(
			description="Directory search in website V0.0.1"
		)
		parser.add_argument("-d", help="Domain/Host - example -d https://example.com")
		parser.add_argument("-dl", help="Domain or Host List -  example -dl domain.txt")
		parser.add_argument("-f", help="Directory or filename list -f file.txt")
		parser.add_argument("-t", help="CPU threads default 10 example -t 8")
		argv = (parser.parse_args())

		# input argv to variable 
		domain = argv.d   
		domainfile = argv.dl
		filename = argv.f
		cpu = argv.t
		threads = 10

		if (cpu):
			threads = int(cpu)

		if (filename == None):
			print ("[!] filename is mandatory ")
			sys.exit(1)



		if (domain):
		    start = datetime.today()
		    print ("[+] Job start at :", start)
		    p=mp.Pool(threads)
		    list_file = file_read(domain, filename)
		    p.map(doSearchWithDomainName, list_file)
		    p.close()
		    p.join()

		    print ("\n[+] Job Done at ", datetime.today())
			
		else :
			print ("A")

	except:
		print ("[!] Try -h for details")


if __name__ == '__main__':
	main()