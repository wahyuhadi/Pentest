"""
	This Tools for monitoring github for ossint
	By : @wahyuhadi
"""

import requests
import argparse
import json
import sys
from time import sleep

# Global Variable
GITHUB_CODE  = "https://api.github.com/search/code?q=" # for search code in some user
GITHUB_REPO  = "https://api.github.com/search/repositories" # for search repo by keyword


def searchInUser(user, keyword):
	# for search code in user github
	# parameter required is user and keyword
	try :
		parameter = str(keyword)+"+in:file,readme,code,description+user:"+str(user)
		url = GITHUB_CODE+parameter
		
		responses = requests.get(
            url,
            headers={'Accept': 'application/vnd.github.v3.text-match+json', 'X-RateLimit-Limit': '600000'},
        )


		json_headers = responses.headers
		json_response = json.loads(responses.text)
		rate_limit = json_headers['X-RateLimit-Remaining']

		if (int(rate_limit) <= 1):
			# github rate limit , see full api doc for github
			print ("[!] X-RateLimit-Remaining is ", rate_limit, " sleep for 20 seconds before get responses")
			print ("[!] Increse your X-RateLimit-Remaining with token \n")
			sleep(20)


		for i in range (0, len(json_response['items'])):
			print ("[+] Name : ",json_response['items'][i]['name'])
			print ("[+] Path : ",json_response['items'][i]['path'])
			print ("[+] Url  : ", json_response['items'][i]['html_url'])
			#print ("[+] Match: ", json_response['items'][i]['text_matches'])
			print ("\n")

		print ("[+] Found ",json_response['total_count'], "keyword ", keyword)
	except  :
		print ("[x] Something Error ", sys.exc_info()[0])
		pass



def searchByKeyWord(keyword):
	# for searching repository by keyword
	# parameter required is keyword
	params = str(keyword)+'+in:file,readme,code,description'
	isResponses = requests.get(
        GITHUB_REPO,
        params={
            'q': params,
            'sort' : 'stars',
            'order' : 'asc',
            'page' : '1',
            'per_page' : '100000'
        },
        headers={'Accept': 'application/vnd.github.v3.text-match+json', 'X-RateLimit-Limit': '60000000', 'X-RateLimit-Remaining': '60000000'},
    )

	json_response = json.loads(isResponses.text)
	json_headers = isResponses.headers
	rate_limit = json_headers['X-RateLimit-Remaining']

	if (int(rate_limit) <= 1) :
		# github rate limit , see full api doc for github
		print ("[!] X-RateLimit-Remaining is ", rate_limit, " sleep for 20 seconds before get responses")
		print ("[!] Increse your X-RateLimit-Remaining with token \n")
		sleep(20)

	from pprint import pprint
	for i in range(0 , len(json_response['items'])):
		# pprint (json_response['items'][i])

		print ("[+] URL 	: ", json_response['items'][i]['html_url'])
		print ("[+] Repo 	: ", json_response['items'][i]['name'])
		print ("[+] Owner 	: ", json_response['items'][i]['owner']['login'] )
		print ("")
		
	print ("[+] Total Found : " , len(json_response['items']), " for keyword : ", keyword)




def main():

	parser = argparse.ArgumentParser(
		description="github-monitor for monitoring code, creds leak, or code leak in github account"
	)
	parser.add_argument("-f", help="location file list user - example -f user.txt")
	parser.add_argument("-k", help="keyword will be find -  example -k password,username")
	parser.add_argument("-u", help="username github - example -u wahyuhadi")
	argv = (parser.parse_args())

	# input argv to variable 
	keyword = argv.k    # keyword can be more than one example -k user,pass,db....
	userFile = argv.f
	username = argv.u

	if (keyword == None) :
		# if Keyword not declare
		print ("[!] Please add argument -k for keyword")
		sys.exit(0)
	


	if (username):
		# python3 github-monitor.py -u wahyuhadi -k code
		# if username argument is true
		searchInUser(username, keyword)

	else :
		# for default runner , search code in github by keyword
		# python3 github-monitory.py -k code
		searchByKeyWord(keyword)

if __name__ == '__main__':
	main()